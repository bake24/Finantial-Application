/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
 */

'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '../Button/Button';

interface BeforeInstallPromptEvent extends Event {
  prompt(): Promise<void>;
  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
}

interface InstallPromptProps {
  className?: string;
  variant?: 'banner' | 'button' | 'floating';
  showOnMobile?: boolean;
  showOnDesktop?: boolean;
}

export const InstallPrompt: React.FC<InstallPromptProps> = ({
  className = '',
  variant = 'banner',
  showOnMobile = true,
  showOnDesktop = true,
}) => {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
  const [showPrompt, setShowPrompt] = useState(false);
  const [isInstalled, setIsInstalled] = useState(false);
  const [isIOS, setIsIOS] = useState(false);
  const [isStandalone, setIsStandalone] = useState(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const checkInstalled = () => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ standalone —Ä–µ–∂–∏–º–∞
      const isStandaloneMode = window.matchMedia('(display-mode: standalone)').matches;
      setIsStandalone(isStandaloneMode);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ iOS
      const isIOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent);
      setIsIOS(isIOSDevice);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ PWA
      if (isStandaloneMode || (window.navigator as any).standalone) {
        setIsInstalled(true);
        console.log('[PWA Install] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return;
      }

      console.log('[PWA Install] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, iOS:', isIOSDevice);
    };

    checkInstalled();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ beforeinstallprompt (Android Chrome)
    const handleBeforeInstallPrompt = (e: Event) => {
      console.log('[PWA Install] beforeinstallprompt —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
      e.preventDefault();
      setDeferredPrompt(e as BeforeInstallPromptEvent);
      setShowPrompt(true);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    const handleAppInstalled = () => {
      console.log('[PWA Install] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      setIsInstalled(true);
      setShowPrompt(false);
      setDeferredPrompt(null);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  const handleInstallClick = async () => {
    console.log('[PWA Install] –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–∞—Ç–∞');
    console.log('[PWA Install] deferredPrompt:', !!deferredPrompt, 'isIOS:', isIOS);
    
    if (deferredPrompt) {
      // Android Chrome - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π prompt
      console.log('[PWA Install] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Android prompt');
      try {
        await deferredPrompt.prompt();
        const { outcome } = await deferredPrompt.userChoice;
        console.log('[PWA Install] –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', outcome);
        
        if (outcome === 'accepted') {
          console.log('[PWA Install] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É');
        } else {
          console.log('[PWA Install] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É');
        }
        
        setDeferredPrompt(null);
        setShowPrompt(false);
      } catch (error) {
        console.error('[PWA Install] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
      }
    } else if (isIOS) {
      // iOS Safari - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      console.log('[PWA Install] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º iOS –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏');
      alert('–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ iOS:\n1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" (üì§) –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞\n2. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞ —ç–∫—Ä–∞–Ω –î–æ–º–æ–π"\n3. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"');
    } else {
      console.log('[PWA Install] Prompt –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ HTTPS –∏ manifest.json –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
  };

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
  if (isInstalled || isStandalone) {
    return null;
  }

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  if (!showOnMobile && /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    return null;
  }

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  if (!showOnDesktop && !/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    return null;
  }

  if (!showPrompt) {
    return null;
  }

  if (variant === 'floating') {
    return (
      <div
        className={`fixed left-4 right-4 z-30 md:right-4 md:left-auto md:max-w-sm ${className}`}
        style={{
          bottom: 'calc(4rem + env(safe-area-inset-bottom) + 0.5rem)',
        }}
      >
        <div className="bg-white shadow-lg rounded-lg p-3 border border-gray-200 animate-slide-up">
          <div className="flex items-center gap-3">
            <div className="flex-shrink-0">
              <div className="w-10 h-10 bg-bitcoin-100 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-bitcoin-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
              </div>
            </div>
            <div className="flex-1 min-w-0">
              <h3 className="font-semibold text-gray-900 text-sm">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h3>
              <p className="text-xs text-gray-600 mt-0.5 truncate">
                –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–π–º–∞–º
              </p>
            </div>
            <Button
              size="sm"
              onClick={handleInstallClick}
              className="text-xs whitespace-nowrap"
            >
              –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </Button>
            <button
              onClick={() => setShowPrompt(false)}
              className="flex-shrink-0 text-gray-400 hover:text-gray-600 p-1"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (variant === 'button') {
    return (
      <Button
        onClick={handleInstallClick}
        variant="secondary"
        className={`flex items-center gap-2 ${className}`}
      >
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
        </svg>
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      </Button>
    );
  }

  // Banner variant (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  return (
    <div className={`bg-gradient-to-r from-bitcoin-50 to-bitcoin-100 border border-bitcoin-200 rounded-lg p-4 ${className}`}>
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-bitcoin-500 rounded-lg flex items-center justify-center">
            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
            </svg>
          </div>
          <div>
            <h3 className="font-semibold text-bitcoin-900">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Bitcoin Loan App</h3>
            <p className="text-sm text-bitcoin-700">
              –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø, –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button
            onClick={handleInstallClick}
            size="sm"
            className="bg-bitcoin-500 hover:bg-bitcoin-600 text-white"
          >
            –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </Button>
          <button
            onClick={() => setShowPrompt(false)}
            className="text-bitcoin-600 hover:text-bitcoin-800"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};
